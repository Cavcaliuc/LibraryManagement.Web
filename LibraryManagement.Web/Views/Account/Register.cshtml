@model LibraryManagement.Web.Models.RegisterViewModel
@{
    ViewBag.Title = "Register";
}
@using CaptchaMvc.HtmlHelpers;

<h2>@ViewBag.Title.</h2>

@using (Html.BeginForm("Register", "Account", FormMethod.Post, new { @class = "form-horizontal", role = "form", enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    <h4>Create a new account.</h4>
    <hr />
    @Html.ValidationSummary("", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(m => m.Email, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.Email, new { @class = "form-control" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.UserName, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.UserName, new { @class = "form-control" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.CountryName, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.CountryName, new { @class = "form-control" })
            @Html.HiddenFor(model => model.CountryId)

            @Html.ValidationMessageFor(model => model.CountryName, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.ParentLocationName, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.ParentLocationName, new { @class = "form-control" })
            @Html.HiddenFor(model => model.ParentLocationId)

            @Html.ValidationMessageFor(model => model.ParentLocationName, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.LocationName, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.LocationName, new { @class = "form-control" })
            @Html.HiddenFor(model => model.LocationId)

            @Html.ValidationMessageFor(model => model.LocationName, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.DateOfBirth, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            <input type="date" id="DateOfBirth" name="DateOfBirth" min="1900-01-01" max="2015-01-01">
            @Html.ValidationMessageFor(m => m.DateOfBirth)
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.Photo, new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <input name="fileUpload" type="file" />
            @Html.ValidationMessageFor(model => model.Photo)
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Password, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.PasswordFor(m => m.Password, new { @class = "form-control" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.ConfirmPassword, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control" })
        </div>
    </div>
   
    <tr>
            <td>Verification</td>
            <td>@Html.Captcha(5)</td>
        </tr>
    
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" class="btn btn-default" value="Register" />
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.10.0.min.js" type="text/javascript"></script>
    <script src="https://ajax.aspnetcdn.com/ajax/jquery.ui/1.9.2/jquery-ui.min.js" type="text/javascript"></script>
    <link href="https://ajax.aspnetcdn.com/ajax/jquery.ui/1.9.2/themes/blitzer/jquery-ui.css" rel="Stylesheet" type="text/css" />

    <script type="text/javascript">
    $(function () {
        $("#CountryName").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '@Url.Action("GetCountries", "Account")',
                        data: "{ 'term': '" + request.term + "'}",
                        dataType: "json",
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        success: function (data) {
                            response($.map(data, function(val, item) {
                                return {
                                    label: val.Name,
                                    value: val.Name,
                                    Id: val.Id
                                };
                            }));
                        },
                        error: function (response) {
                            alert(response.responseText);
                        },
                        failure: function (response) {
                            alert(response.responseText);
                        }
                    });
                },
                select: function (e, i) {
                    $("#CountryId").val(i.item.Id);
                    $('#ParentLocationName').val('');
                    $('#ParentLocationId').val('');
                    $('#LocationName').val('');
                    $('#LocationId').val('');
                },
                minLength: 1
            }).focus(function () {
                $(this).autocomplete("search");
            });

        $('#CountryName').change(function () {
            var selectedCountry = $("#CountryId").val();
            var citySelect = $('#ParentLocationId');
            citySelect.empty();
            if (selectedCountry != null && selectedCountry !== '') {
                $("#ParentLocationName").autocomplete({
                    source: function (request, response) {
                        $.ajax({
                            url: '@Url.Action("GetCities", "Account")',
                            data: "{ 'countryId': '" + selectedCountry + "','term': '" + request.term + "'}",
                            dataType: "json",
                            type: "POST",
                            contentType: "application/json; charset=utf-8",
                            success: function (data) {
                                response($.map(data, function(val, item) {
                                    return {
                                        label: val.Name,
                                        value: val.Name,
                                        Id: val.Id
                                    };
                                }));
                            },
                            error: function (response) {
                                alert(response.responseText);
                            },
                            failure: function (response) {
                                alert(response.responseText);
                            }
                        });
                    },
                    select: function (e, i) {
                        $("#ParentLocationId").val(i.item.Id);
                        $('#LocationName').val('');
                        $('#LocationId').val('');
                    },
                    minLength: 1
                }).focus(function () {
                    $(this).autocomplete("search");
                });
            }
        });

        $('#ParentLocationName').change(function () {
            var selectedCountry = $("#CountryId").val();
            var selectedCity = $("#ParentLocationId").val();
            $('#LocationId').val('');
            var locationSelect = $('#LocationId');
            locationSelect.empty();
            if (selectedCountry != null && selectedCountry !== '' &&
                selectedCity != null && selectedCity !== '') {
                $("#LocationName").autocomplete({
                    source: function (request, response) {
                        $.ajax({
                            url: '@Url.Action("GetLocations", "Account")',
                            data: "{ 'countryId': '" + selectedCountry + "','cityId': '" + selectedCity + "','term': '" + request.term + "'}",
                            dataType: "json",
                            type: "POST",
                            contentType: "application/json; charset=utf-8",
                            success: function (data) {
                                response($.map(data, function(val, item) {
                                    return {
                                        label: val.Name,
                                        value: val.Name,
                                        Id: val.Id
                                    };
                                }));
                            },
                            error: function (response) {
                                alert(response.responseText);
                            },
                            failure: function (response) {
                                alert(response.responseText);
                            }
                        });
                    },
                    select: function (e, i) {
                        $("#LocationId").val(i.item.Id);
                    },
                    minLength: 1
                }).focus(function () {
                    $(this).autocomplete("search");
                });
            }
        });


        });
    </script>
}
