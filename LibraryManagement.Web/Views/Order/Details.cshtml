@using PagedList
@using PagedList.Mvc
@using Microsoft.AspNet.Identity
@model LibraryManagement.Web.Models.OrderModel

@{
    ViewBag.Title = "Order";
    var messages = @Model.Messages.ToPagedList((int)ViewBag.Page, 10);
    string currentSort = ViewBag.currentSort;
    var loggedUserImgSrc = Url.Action("GetUserPhoto", "Account");
    var currentUser = User.Identity.GetUserName();
    var secondUser = (currentUser == Model.OwnerUserName ? Model.CreatedByName : Model.OwnerUserName);
    var secondUserImgSrc = Url.Action("GetUserPhoto", "Account", new {isThumbNail = true, username = secondUser});

    <div class="form-horizontal">
        <h4>Order Details</h4>

        <table class="table ">
            <tr>
                <td>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.DisplayNameFor(model => model.Title)
                        </dt>

                        <dd>
                            @Html.DisplayFor(model => model.Title)
                            @Html.HiddenFor(model => model.Title)
                            @Html.HiddenFor(model => model.StockId)
                            @Html.HiddenFor(model => model.ItemId)
                        </dd>

                        <dt>
                            @Html.DisplayNameFor(model => model.CategoryName)
                        </dt>

                        <dd>
                            @Html.DisplayFor(model => model.CategoryName)
                            @Html.HiddenFor(model => model.CategoryName)
                            @Html.HiddenFor(model => model.CategoryId)

                        </dd>

                        <dt>
                            @Html.DisplayNameFor(model => model.PublisherName)
                        </dt>

                        <dd>
                            @Html.DisplayFor(model => model.PublisherName)
                            @Html.HiddenFor(model => model.PublisherName)
                            @Html.HiddenFor(model => model.PublisherId)

                        </dd>

                        <dt>
                            @Html.DisplayNameFor(model => model.AuthorFullName)
                        </dt>

                        <dd>
                            @Html.DisplayFor(model => model.AuthorFullName)
                            @Html.HiddenFor(model => model.AuthorFirstName)
                            @Html.HiddenFor(model => model.AuthorLastName)
                            @Html.HiddenFor(model => model.AuthorId)

                        </dd>

                        <dt>
                            @Html.DisplayNameFor(model => model.Year)
                        </dt>

                        <dd>
                            @Html.DisplayFor(model => model.Year)
                            @Html.HiddenFor(model => model.Year)
                        </dd>

                        <dt>
                            @Html.DisplayNameFor(model => model.ActionTypeName)
                        </dt>

                        <dd>
                            @Html.DisplayFor(model => model.ActionTypeName)
                            @Html.HiddenFor(model => model.ActionTypeName)
                            @Html.HiddenFor(model => model.ActionTypeId)

                        </dd>

                        <dt>
                            @Html.DisplayNameFor(model => model.ConditionName)
                        </dt>

                        <dd>
                            @Html.DisplayFor(model => model.ConditionName)
                            @Html.HiddenFor(model => model.ConditionName)
                            @Html.HiddenFor(model => model.ConditionId)
                        </dd>

                        <dt>
                            @Html.DisplayNameFor(model => model.Quantity)

                        </dt>

                        <dd>
                            @Html.DisplayFor(model => model.Quantity)
                            @Html.HiddenFor(model => model.Quantity)
                        </dd>

                        <dt>
                            @Html.DisplayNameFor(model => model.OwnerUserName)
                        </dt>

                        <dd>
                            @Html.DisplayFor(model => model.OwnerUserName)
                            @Html.HiddenFor(model => model.OwnerUserName)
                            @Html.HiddenFor(model => model.OwnerId)
                        </dd>

                    </dl>
                </td>
                <td>
                    <dl class="dl-horizontal">
                        <dt>
                            @Html.DisplayNameFor(model => model.OrderQuantity)
                        </dt>

                        <dd>
                            @Html.DisplayFor(model => model.OrderQuantity)
                        </dd>

                        <dt>
                            @Html.DisplayNameFor(model => model.OrderStatusName)
                        </dt>

                        <dd>
                            @Html.DisplayFor(model => model.OrderStatusName)
                        </dd>

                        <dt>
                            @Html.DisplayNameFor(model => model.CreatedDate)
                        </dt>

                        <dd>
                            @Html.DisplayFor(model => model.CreatedDate)
                        </dd>

                        <dt>
                            @Html.DisplayNameFor(model => model.CreatedByName)
                        </dt>

                        <dd>
                            @Html.DisplayFor(model => model.CreatedByName)
                        </dd>
                        <dt>
                            @Html.DisplayNameFor(model => model.ModifiedDate)
                        </dt>

                        <dd>
                            @Html.DisplayFor(model => model.ModifiedDate)
                        </dd>

                        <dt>
                            @Html.DisplayNameFor(model => model.ModifiedByName)
                        </dt>

                        <dd>
                            @Html.DisplayFor(model => model.ModifiedByName)
                        </dd>

                    </dl>
                </td>
            </tr>
        </table>

    </div>

    <style>
        div.panel-body {
            overflow-y: scroll;
            background: url('http://subtlepatterns.com/patterns/geometry2.png');
        }
    </style>
    <h2>Chat with @(User.Identity.GetUserName() == @Model.OwnerUserName ? @Model.CreatedByName : @Model.OwnerUserName)</h2>
    <div class="chat-panel panel panel-default">
        <div class="panel-body" id="chat" style="height:400px;">
            <div id="discussion">
            @foreach (var item in messages.Reverse())
            {
                <p style="color: blue; text-align: @(item.UserName == User.Identity.GetUserName() ? "right" : "left")">
                    <strong>
                        <img 
                            src="@(item.UserName != User.Identity.GetUserName() ? @sec : @loggedUserImgSrc)" 
                            title="@item.UserName"
                            height="50" width="50"
                            style="margin: auto;
                                -moz-border-radius: 60px;
                                border-radius: 100px;
                                padding: 6px"
                                box-shadow: 0px 0px 20px #888;"/>
                    </strong>
                    @item.Text [@item.CreatedDate]
                </p>
            }
            </div>
        </div>
        <div class="panel-footer">
            <div class="input-group">
                <input id="message" type="text" name="message" class="form-control input-sm" placeholder="Type your message here..." />
                <span class="input-group-btn">
                    <input type="button" class="btn btn-warning btn-sm" id="sendmessage" value="Send">
                </span>
            </div>
        </div>
    </div>
}

@section scripts {
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.4.1.min.js"></script>
    <!--Reference the SignalR hub script. -->
    <script src="~/SignalR/hubs"></script>
    <!--SignalR script to update the chat page and send messages.-->
    <script>
    $("#chat").animate({scrollTop:$("#chat")[0].scrollHeight}, 1000);
    $(function () {
        // Reference the auto-generated proxy for the hub.
        var chat = $.connection.chatHub;
        // Create a function that the hub can call back to display messages.
        chat.client.addNewMessageToPage = function (name, message) {
            if (name !== @currentUser) {
                // Add the message to the page.
            $('#discussion').append(`<p style="color:green; text-align:left; width:500px"><strong><img = src="@loggedUserImgSrc" title="${user}">`
                + ' </strong> ' + htmlEncode(message) + '</p>');
            }
            else {
                // Add the message to the page.
            $('#discussion').append(`<p style="color:blue;text-align:right;"><strong><img = src="@secondUserImgSrc" title="${@secondUser}">`
                + ' </strong> ' + htmlEncode(message) + '</p>');
            }
            $('#discussion').scrollTop = $('#discussion')[0].scrollHeight;
            $("#chat").animate({scrollTop:$("#chat")[0].scrollHeight}, 1000);
        };
        // Set initial focus to message input box.
        $('#message').focus();
        // Start the connection.
        $.connection.hub.start().done(function () {
            // Join the room
            chat.server.joinRoom('@Model.OrderId');
            var sendMessageFunction = () => {
                // Call the Send method on the hub.
                chat.server.send('@Model.OrderId', user, $('#message').val());
                // Clear text box and reset focus for next comment.
                $('#message').val('').focus();
            };
            $('#sendmessage').click(sendMessageFunction);
            $('#message').on('keyup', (e) => {
                if (e.keyCode === 13) {
                    sendMessageFunction();
                }
            });
        });
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }
    });    
    </script>
}