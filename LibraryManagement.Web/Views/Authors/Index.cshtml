@model PagedList.IPagedList<LibraryManagement.Web.Models.Author>
@using PagedList.Mvc;
@{
    <h2>Authors</h2>
    <p>
        @Html.ActionLink("Create New", "Create")
    </p>

    string currentSort = ViewBag.currentSort;

    <form class="form-inline">
        <div class="form-group">
            <input type="text" name="searchString" value="@ViewBag.searchQuery" class="search-text form-control" placeholder="Search..." />
        </div>
        <button type="submit" class="btn btn-info">Search</button>
    </form>
    <br />
    <div class="table-responsive">
        <table class="table table-striped table-condensed table-hover">
            <tr>
                <th>
                    @Html.ActionLink("First Name", "Index", Request.QueryString.ToRouteValueDictionary("sortOrder", (string)ViewBag.FirstNameSortParam))
                    @Html.SortIdentifier(currentSort, "firstName")
                </th>
                <th>
                    @Html.ActionLink("Last Name", "Index", Request.QueryString.ToRouteValueDictionary("sortOrder", (string)ViewBag.LastNameSortParam))
                    @Html.SortIdentifier(currentSort, "lastName")
                </th>
            </tr>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.FirstName)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.LastName)
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        @if (Model.PageCount > 1)
        {
            <div class="pager">
                @Html.PagedListPager(Model, page => Url.Action("Index", new
           {
               page,
               sortOrder = ViewBag.currentSort,
               searchString = ViewBag.searchQuery
           }))
                @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount
            </div>
        }
    </div>
}