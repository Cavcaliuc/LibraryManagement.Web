@model LibraryManagement.Web.Models.StockModel

@{
    ViewBag.Title = "Save";
}

<h2>Save stock</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Stock</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2 form-required-field" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.Title, new { @class = "form-control" })
                @Html.HiddenFor(model => model.ItemId)

                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CategoryId, "Category", htmlAttributes: new { @class = "control-label col-md-2 form-required-field" })
            <div class="col-md-10">
                @Html.DropDownListFor(m => m.CategoryId, null, "Please select", htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CategoryId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PublisherName, "Publisher", htmlAttributes: new { @class = "control-label col-md-2 form-required-field" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.PublisherName, new { @class = "form-control" })
                @Html.HiddenFor(model => model.PublisherId)

                @Html.ValidationMessageFor(model => model.PublisherName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.AuthorFirstName, "Author's First Name", htmlAttributes: new { @class = "control-label col-md-2 form-required-field" })

            <div class="col-md-10">
                @Html.TextBoxFor(model => model.AuthorFirstName, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.AuthorFirstName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.AuthorLastName, "Author's Last Name", htmlAttributes: new { @class = "control-label col-md-2 form-required-field" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.AuthorLastName, new { @class = "form-control" })
                @Html.HiddenFor(model => model.AuthorId)
                @Html.ValidationMessageFor(model => model.AuthorLastName, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.Year, htmlAttributes: new { @class = "control-label col-md-2 form-required-field" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Year, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Year, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ActionTypeId, "Action Type", htmlAttributes: new { @class = "control-label col-md-2 form-required-field" })
            <div class="col-md-10">
                @Html.DropDownListFor(m => m.ActionTypeId, null, "Please select", htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ActionTypeId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ConditionId, "Condition", htmlAttributes: new { @class = "control-label col-md-2 form-required-field" })
            <div class="col-md-10">
                @Html.DropDownListFor(m => m.ConditionId, null, "Please select", htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ConditionId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "control-label col-md-2 form-required-field" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.10.0.min.js" type="text/javascript"></script>
    <script src="https://ajax.aspnetcdn.com/ajax/jquery.ui/1.9.2/jquery-ui.min.js" type="text/javascript"></script>
    <link href="https://ajax.aspnetcdn.com/ajax/jquery.ui/1.9.2/themes/blitzer/jquery-ui.css" rel="Stylesheet" type="text/css" />

    <script type="text/javascript">
    $(function () {
        $("#PublisherName").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '@Url.Action("GetPublishers", "Publisher")',
                        data: "{ 'term': '" + request.term + "'}",
                        dataType: "json",
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        success: function (data) {
                            response($.map(data, function(val, item) {
                                return {
                                    label: val.Name,
                                    value: val.Name,
                                    Id: val.Id
                                };
                            }));
                        },
                        error: function (response) {
                            alert(response.responseText);
                        },
                        failure: function (response) {
                            alert(response.responseText);
                        }
                    });
                },
                select: function (e, i) {
                    $("#PublisherId").val(i.item.Id);
                },
                minLength: 1
            }).focus(function () {
                $(this).autocomplete("search");
            });

        $("#Title").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '@Url.Action("GetTitles", "Item")',
                    data: "{ 'term': '" + request.term + "'}",
                    dataType: "json",
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    success: function (data) {
                        response($.map(data, function(val, item) {
                            return {
                                label: val.Title,
                                value: val.Title,
                                Id: val.Id
                            };
                        }));
                    },
                    error: function (response) {
                        alert(response.responseText);
                    },
                    failure: function (response) {
                        alert(response.responseText);
                    }
                });
            },
            select: function (e, i) {
                $("#ItemId").val(i.item.Id);
            },
            minLength: 1
        }).focus(function () {
            $(this).autocomplete("search");
        });

        $("#AuthorFirstName").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: '@Url.Action("GetFirstNames", "Authors")',
                        data: "{ 'term': '" + request.term + "'}",
                        dataType: "json",
                        type: "POST",
                        contentType: "application/json; charset=utf-8",
                        success: function (data) {
                            response($.map(data, function(val, item) {
                                return {
                                    label: val.FirstName,
                                    value: val.FirstName,
                                    Id: val.Id
                                };
                            }));
                        },
                        error: function (response) {
                            alert(response.responseText);
                        },
                        failure: function (response) {
                            alert(response.responseText);
                        }
                    });
                },
                select: function (e, i) {
                   // $("#AuthorId").val(i.item.Id);
                },
                minLength: 1
            }).focus(function () {
                $(this).autocomplete("search");
            });

        $("#AuthorLastName").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '@Url.Action("GetLastNames", "Authors")',
                    data: "{ 'term': '" + request.term + "'}",
                    dataType: "json",
                    type: "POST",
                    contentType: "application/json; charset=utf-8",
                    success: function (data) {
                        response($.map(data, function(val, item) {
                            return {
                                label: val.LastName,
                                value: val.LastName,
                                Id: val.Id
                            };
                        }));
                    },
                    error: function (response) {
                        alert(response.responseText);
                    },
                    failure: function (response) {
                        alert(response.responseText);
                    }
                });
            },
            select: function (e, i) {
                $("#AuthorId").val(i.item.Id);
            },
            minLength: 1
        }).focus(function () {
            $(this).autocomplete("search");
        });
        });
    </script>
}
